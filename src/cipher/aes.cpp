#include "cipher/aes.h"

namespace leaf {

	constexpr std::uint8_t s_box[0x100] {
			0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
			0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
			0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
			0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
			0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
			0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
			0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
			0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
			0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
			0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
			0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
			0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
			0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
			0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
			0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
			0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
	}, inv_s_box[0x100] {
			0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
			0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
			0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
			0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
			0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
			0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
			0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
			0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
			0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
			0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
			0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
			0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
			0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
			0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
			0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
			0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
	};

	template<class I> requires std::is_integral_v<I>
	I sub_bytes(I val) {
		for (std::size_t i = 0; i < sizeof(I); ++i) {
			I mask = 0xff << i * 8;
			val = val & ~mask | s_box[static_cast<uint8_t>(val >> i * 8)] << i * 8;
		}
		return val;
	}

	template<class I> requires std::is_integral_v<I>
	I inv_sub_bytes(I val) {
		for (std::size_t i = 0; i < sizeof(I); ++i) {
			I mask = 0xff << i * 8;
			val = val & ~mask | inv_s_box[val >> i * 8 & 0xff] << i * 8;
		}
		return val;
	}

	void sub_bytes(big_unsigned& state) {
		for (auto& u: state.data)
			u = sub_bytes(u);
	}

	void inv_sub_bytes(big_unsigned& state) {
		for (auto& u: state.data)
			u = inv_sub_bytes(u);
	}

	std::uint8_t xtime(std::uint8_t a) {
		uint8_t ret = a << 1;
		if (a & 0x80)
			ret ^= 0x1b;
		return ret;
	}

	std::uint32_t rotation_left(std::uint32_t val) {
		return val << 8 | val >> 24;
	}

	void rotation_left(big_unsigned& state, std::size_t row, std::size_t shift) {
		std::uint32_t mask = ~(0xff << (4 - row - 1) * 8);
		uint8_t t[shift];
		for (std::size_t i = 0; i < state.data_units(); ++i) {
			if (i < shift)
				t[i] = state.data[state.data_units() - i - 1] >> (4 - row - 1) * 8;
			state.data[state.data_units() - i - 1] &= mask;
			uint8_t byte =
					i + shift >= state.data_units() ?
					t[(i + shift) % state.data_units()]
					:
					state.data[state.data_units() - (i + shift) - 1] >> (4 - row - 1) * 8;
			state.data[state.data_units() - i - 1] |= byte << (4 - row - 1) * 8;
		}
	}

	std::uint8_t aes::GF_multiply(std::uint8_t a, std::uint8_t b) {
		std::uint8_t ret = b & 1 ? a : 0;
		std::uint8_t xt = a;
		for (std::uint8_t i = 1; i < 8; ++i) {
			xt = xtime(xt);
			if (b & 1u << i)
				ret ^= xt;
		}
		return ret;
	}

	void aes::shift_rows(big_unsigned& state) {
		rotation_left(state, 1, 1);
		rotation_left(state, 2, 2);
		rotation_left(state, 3, 3);
	}

	void aes::inv_shift_rows(big_unsigned& state) const {
		rotation_left(state, 1, N_b - 1);
		rotation_left(state, 2, N_b - 2);
		rotation_left(state, 3, N_b - 3);
	}

	void aes::mix_columns(big_unsigned& state) const {
		for (std::size_t i = 0; i < N_b; ++i) {
			uint8_t b_0 = state.value<uint8_t>((N_b - i - 1) * 4 + 3),
					b_1 = state.value<uint8_t>((N_b - i - 1) * 4 + 2),
					b_2 = state.value<uint8_t>((N_b - i - 1) * 4 + 1),
					b_3 = state.value<uint8_t>((N_b - i - 1) * 4 + 0);
			uint8_t a = GF_multiply(0x02, b_0) ^ GF_multiply(0x03, b_1) ^ b_2 ^ b_3;
			uint8_t b = b_0 ^ GF_multiply(0x02, b_1) ^ GF_multiply(0x03, b_2) ^ b_3;
			uint8_t c = b_0 ^ b_1 ^ GF_multiply(0x02, b_2) ^ GF_multiply(0x03, b_3);
			uint8_t d = GF_multiply(0x03, b_0) ^ b_1 ^ b_2 ^ GF_multiply(0x02, b_3);
			state.data[N_b - i - 1] = a << 24 | b << 16 | c << 8 | d;
		}
	}

	void aes::inv_mix_columns(big_unsigned& state) const {
		for (std::size_t i = 0; i < N_b; ++i) {
			uint8_t b_0 = state.value<uint8_t>((N_b - i - 1) * 4 + 3),
					b_1 = state.value<uint8_t>((N_b - i - 1) * 4 + 2),
					b_2 = state.value<uint8_t>((N_b - i - 1) * 4 + 1),
					b_3 = state.value<uint8_t>((N_b - i - 1) * 4 + 0);
			uint8_t a = GF_multiply(0x0e, b_0) ^ GF_multiply(0x0b, b_1) ^ GF_multiply(0x0d, b_2) ^ GF_multiply(0x09, b_3);
			uint8_t b = GF_multiply(0x09, b_0) ^ GF_multiply(0x0e, b_1) ^ GF_multiply(0x0b, b_2) ^ GF_multiply(0x0d, b_3);
			uint8_t c = GF_multiply(0x0d, b_0) ^ GF_multiply(0x09, b_1) ^ GF_multiply(0x0e, b_2) ^ GF_multiply(0x0b, b_3);
			uint8_t d = GF_multiply(0x0b, b_0) ^ GF_multiply(0x0d, b_1) ^ GF_multiply(0x09, b_2) ^ GF_multiply(0x0e, b_3);
			state.data[N_b - i - 1] = a << 24 | b << 16 | c << 8 | d;
		}
	}

	void aes::add_round_key(big_unsigned& state, const big_unsigned& key_schedule, std::size_t round) const {
		for (std::size_t i = 0; i < N_b; ++i)
			state[state.data_units() - i - 1] ^= key_schedule[key_schedule.data_units() - (N_b * round + i) - 1];
	}

	void aes::cipher(big_unsigned& val, const big_unsigned& key_schedule) const {
		add_round_key(val, key_schedule, 0);
		for (std::size_t i = 1; i < N_r; ++i) {
			sub_bytes(val);
			shift_rows(val);
			mix_columns(val);
			add_round_key(val, key_schedule, i);
		}
		sub_bytes(val);
		shift_rows(val);
		add_round_key(val, key_schedule, N_r);
	}

	void aes::inv_cipher(big_unsigned& val, const big_unsigned& key_schedule) const {
		add_round_key(val, key_schedule, N_r);
		for (std::size_t i = N_r - 1; i > 0; --i) {
			inv_shift_rows(val);
			inv_sub_bytes(val);
			add_round_key(val, key_schedule, i);
			inv_mix_columns(val);
		}
		inv_shift_rows(val);
		inv_sub_bytes(val);
		add_round_key(val, key_schedule, 0);
	}

	void aes::key_expansion(const big_unsigned& key, big_unsigned& key_schedule) const {
		key_schedule = key;
		key_schedule.resize(key_schedule_units * 32);
		key_schedule <<= (key_schedule_units * 32 - key.bits());
		uint8_t xt = 0x01;
		for (std::size_t i = N_k; i < key_schedule_units; ++i) {
			auto t = key_schedule.value<uint32_t>(key_schedule_units - 1 - (i - 1));
			if (i % N_k == 0) {
				t = sub_bytes(rotation_left(t));
				t ^= xt << 8 * 3;
				xt = xtime(xt);
			} else if (N_k > 6 && i % N_k == 4)
				t = sub_bytes(t);
			key_schedule[key_schedule_units - 1 - i] = key_schedule[key_schedule_units - 1 - (i - N_k)] ^ t;
		}
	}
}
