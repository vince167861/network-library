#pragma once
#include "tls-utils/type.h"
#include "number/big_number.h"
#include <memory>
#include <string>
#include <ostream>

namespace leaf::network::tls {

	/// Interface of cipher suites.
	struct cipher_suite {

		const cipher_suite_t value;

		/// Length of the string generated by `hash()`, in bytes.
		const std::size_t digest_length;

		/// Length of the key used by cipher suite, in bytes.
		const std::size_t key_length;

		/// Length of the initialization vector used by cipher suite, in bytes.
		const std::size_t iv_length;

		virtual void set_key(const big_unsigned& secret_key) = 0;

		[[nodiscard]]
		virtual big_unsigned encrypt(big_unsigned nonce, big_unsigned additional, big_unsigned plain_text) const = 0;

		virtual big_unsigned decrypt(big_unsigned nonce, big_unsigned data, big_unsigned cipher_text) const = 0;

		virtual byte_string hash(byte_string_view) const = 0;

		virtual byte_string HMAC_hash(byte_string_view data, byte_string_view key) const = 0;

		/**
		 * Key schedule function.
		 */
		byte_string HKDF_expand(byte_string_view key, byte_string_view info, std::size_t length) const;

		/**
		 * Key schedule function.
		 */
		byte_string
		HKDF_expand_label(byte_string_view key, byte_string_view label, byte_string_view context, std::uint16_t length) const;

		static byte_string HKDF_info(byte_string_view label, byte_string_view context, std::uint16_t length);

		/**
		 * Key schedule function.
		 */
		byte_string derive_secret(byte_string_view key, byte_string_view label, byte_string_view msg) const;

		cipher_suite(cipher_suite_t, std::size_t digest_length, std::size_t key_length, std::size_t iv_length);

		virtual ~cipher_suite() = default;
	};


	struct unimplemented_cipher_suite: cipher_suite {

		void
		set_key(const big_unsigned&) override {
			throw std::exception();
		}

		big_unsigned
		encrypt(big_unsigned, big_unsigned, big_unsigned) const override {
			throw std::exception();
		}

		big_unsigned
		decrypt(big_unsigned, big_unsigned, big_unsigned) const override {
			throw std::exception();
		}

		byte_string
		hash(byte_string_view) const override {
			throw std::exception();
		}

		byte_string
		HMAC_hash(byte_string_view, byte_string_view) const override {
			throw std::exception();
		}

		unimplemented_cipher_suite(cipher_suite_t c)
				: cipher_suite(c, 0, 0, 0) {
		}
	};


	std::unique_ptr<cipher_suite> get_cipher_suite(cipher_suite_t);
}
